name: Build and push docker images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * MON'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # Get version information
  version:
    name: Version
    runs-on: ubuntu-latest

    outputs:
      # Build version number
      SemVer2: ${{ steps.nbgv.outputs.SemVer2 }}
      # ESPHome version number
      ESPHomeVersion: ${{ steps.plv.outputs.latestVersion }}
      # Check if the branch is main
      MainBranch: ${{ endsWith(github.ref, 'refs/heads/main') }}
      # Push if not a pull request
      PushAction: ${{ (github.event_name != 'pull_request') }}
      # Tag as latest or develop
      TagName: ${{ endsWith(github.ref, 'refs/heads/main') && 'latest' || 'develop' }}
      # Docker image
      ImageName: docker.io/ptr727/esphome-nonroot


    steps:

      # Checkout code
      # https://github.com/marketplace/actions/checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Get all history for version calculation
          fetch-depth: 0

      # Run Nerdbank.GitVersioning
      # https://github.com/marketplace/actions/nerdbank-gitversioning
      - name: Run Nerdbank.GitVersioning tool
        id: nbgv
        uses: dotnet/nbgv@master

      # TODO:
      #   curl --silent https://api.github.com/repos/esphome/esphome/releases/latest | jq -r .tag_name
      #   curl --silent https://pypi.org/pypi/esphome/json | jq -r '.releases | keys | .[]' | sort -V | tail -n 1
      #   curl --silent https://pypi.org/pypi/esphome/json | jq -r .info.version

      # TODO: It is possible that the package version gets updated between reading and installing

      # TODO: Warning `set-output` command is deprecated, node 16 deprecated
      # Get package version
      # https://github.com/marketplace/actions/package-latest-version
      - name: Package Latest Version
        id: plv
        uses: Bruce17/ghaction-package-latest-version@v1.1.2
        with:
          package: esphome
          language: python

  # Build and push docker images
  buildpush:
    name: Build and push
    runs-on: ubuntu-latest
    needs: version

    strategy:
      # Keep building even if a job fails, expedites troubleshooting multiple issues
      fail-fast: false
      # Limit number of concurrent builds, avoid github timeout errors
      max-parallel: 4

    steps:

      # Checkout code
      # https://github.com/marketplace/actions/checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup QEMU for multi architecture builds
      # https://github.com/marketplace/actions/docker-setup-qemu
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      # Setup docker build
      # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      # Login to Docker Hub
      # https://github.com/marketplace/actions/docker-login
      - name: Login to Docker Hub
        if: ${{ needs.version.outputs.PushAction }}
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Docker build and push
      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Docker build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Docker/Dockerfile
          push: ${{ needs.version.outputs.PushAction }}
          # TODO: Only tag with ESPHome version if main build
          tags: |
            ${{ needs.version.outputs.ImageName }}:${{ needs.version.outputs.TagName }}
            ${{ needs.version.outputs.ImageName }}:${{ needs.version.outputs.ESPHomeVersion }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            LABEL_VERSION=${{ needs.version.outputs.SemVer2 }}
            ESPHOME_VERSION=${{ needs.version.outputs.ESPHomeVersion }}

  # Get tool versions from image
  toolversions:
    name: Tool versions
    runs-on: ubuntu-latest
    needs: [buildpush, version]
    if: ${{ needs.version.outputs.PushAction }}

    steps:

    # Get image size
    - name: Get image size
      run: |
        touch ${{ runner.temp }}/version.info
        echo Image: ${{ needs.version.outputs.ImageName }}:${{ needs.version.outputs.TagName }} >> ${{ runner.temp }}/version.info
        echo Size: $(docker manifest inspect -v ${{ needs.version.outputs.ImageName }}:${{ needs.version.outputs.TagName }} | jq '.[] | select(.Descriptor.platform.architecture=="amd64") | [.OCIManifest.layers[].size] | add' | numfmt --to=iec) >> ${{ runner.temp }}/version.info

    # Get tool versions in container
    # https://github.com/marketplace/actions/docker-run-action
    - name: Write tool versions to file
      uses: addnab/docker-run-action@v3
      with:
        image: "${{ needs.version.outputs.ImageName }}:${{ needs.version.outputs.TagName }}"
        options: --volume ${{ runner.temp }}/version.info:/version.info
        run: |
          echo OS: $(. /etc/os-release; echo $PRETTY_NAME) >> /version.info
          echo Python: $(python --version) >> /version.info
          echo ESPHome: $(esphome version) >> /version.info
          echo PlatformIO: $(pio --version) >> /version.info

    # Print version file contents
    - name: Print versions
      run: cat ${{ runner.temp }}/version.info

    # https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload version artifacts
      uses: actions/upload-artifact@v4
      with:
        name: versions
        path: ${{ runner.temp }}/version.info

  # Update Docker README.md
  updatereadme:
    name: Create Docker README.md
    runs-on: ubuntu-latest
    needs: [toolversions, version]
    if: ${{ needs.version.outputs.PushAction }}

    steps:

    # https://github.com/marketplace/actions/checkout
    - name: Checkout
      uses: actions/checkout@v4

    # https://github.com/marketplace/actions/download-a-build-artifact
    - name: Download version artifacts
      uses: actions/download-artifact@v4
      with:
        path: ${{ runner.temp }}/version.info

    - name: Create README.md from README.m4
      run: m4 --include=${{ runner.temp }} ./Docker/README.m4 > ${{ runner.temp }}/README.md

    # https://github.com/marketplace/actions/docker-hub-description
    - name: Update Docker Hub README.md
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        repository: ptr727/esphome-nonroot
        short-description: ${{ github.event.repository.description }}
        readme-filepath: ${{ runner.temp }}/README.md

  # Create a custom badge to report the build date
  datebadge:
    name: Date badge
    runs-on: ubuntu-latest
    needs: [buildpush, version]
    if: ${{ needs.version.outputs.PushAction }}

    steps:

      # Get date from environment as a variable
      - id: date
        run: |
          echo "date=$(date)" >> $GITHUB_OUTPUT

      # Create badge
      # https://github.com/marketplace/actions/bring-your-own-badge
      - name: Build date badge
        uses: RubbaBoy/BYOB@v1
        with:
          name: lastbuild
          label: "Last Build"
          icon: "github"
          status: ${{ steps.date.outputs.date }}
          color: "blue"
          github_token: ${{ secrets.GITHUB_TOKEN }}
